// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/akhettar/grpc-crud-demo/api (interfaces: BookstoreClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	api "github.com/akhettar/grpc-crud-demo/api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockBookstoreClient is a mock of BookstoreClient interface
type MockBookstoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockBookstoreClientMockRecorder
}

// MockBookstoreClientMockRecorder is the mock recorder for MockBookstoreClient
type MockBookstoreClientMockRecorder struct {
	mock *MockBookstoreClient
}

// NewMockBookstoreClient creates a new mock instance
func NewMockBookstoreClient(ctrl *gomock.Controller) *MockBookstoreClient {
	mock := &MockBookstoreClient{ctrl: ctrl}
	mock.recorder = &MockBookstoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookstoreClient) EXPECT() *MockBookstoreClientMockRecorder {
	return m.recorder
}

// CreateBook mocks base method
func (m *MockBookstoreClient) CreateBook(arg0 context.Context, arg1 *api.CreateBookRequest, arg2 ...grpc.CallOption) (*api.Book, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBook", varargs...)
	ret0, _ := ret[0].(*api.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook
func (mr *MockBookstoreClientMockRecorder) CreateBook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookstoreClient)(nil).CreateBook), varargs...)
}

// CreateShelf mocks base method
func (m *MockBookstoreClient) CreateShelf(arg0 context.Context, arg1 *api.CreateShelfRequest, arg2 ...grpc.CallOption) (*api.Shelf, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateShelf", varargs...)
	ret0, _ := ret[0].(*api.Shelf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShelf indicates an expected call of CreateShelf
func (mr *MockBookstoreClientMockRecorder) CreateShelf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShelf", reflect.TypeOf((*MockBookstoreClient)(nil).CreateShelf), varargs...)
}

// DeleteBook mocks base method
func (m *MockBookstoreClient) DeleteBook(arg0 context.Context, arg1 *api.DeleteBookRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBook", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook
func (mr *MockBookstoreClientMockRecorder) DeleteBook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookstoreClient)(nil).DeleteBook), varargs...)
}

// DeleteShelf mocks base method
func (m *MockBookstoreClient) DeleteShelf(arg0 context.Context, arg1 *api.DeleteShelfRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteShelf", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteShelf indicates an expected call of DeleteShelf
func (mr *MockBookstoreClientMockRecorder) DeleteShelf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShelf", reflect.TypeOf((*MockBookstoreClient)(nil).DeleteShelf), varargs...)
}

// GetBook mocks base method
func (m *MockBookstoreClient) GetBook(arg0 context.Context, arg1 *api.GetBookRequest, arg2 ...grpc.CallOption) (*api.Book, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBook", varargs...)
	ret0, _ := ret[0].(*api.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook
func (mr *MockBookstoreClientMockRecorder) GetBook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookstoreClient)(nil).GetBook), varargs...)
}

// GetShelf mocks base method
func (m *MockBookstoreClient) GetShelf(arg0 context.Context, arg1 *api.GetShelfRequest, arg2 ...grpc.CallOption) (*api.Shelf, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetShelf", varargs...)
	ret0, _ := ret[0].(*api.Shelf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelf indicates an expected call of GetShelf
func (mr *MockBookstoreClientMockRecorder) GetShelf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelf", reflect.TypeOf((*MockBookstoreClient)(nil).GetShelf), varargs...)
}

// ListBooks mocks base method
func (m *MockBookstoreClient) ListBooks(arg0 context.Context, arg1 *api.ListBooksRequest, arg2 ...grpc.CallOption) (*api.ListBooksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBooks", varargs...)
	ret0, _ := ret[0].(*api.ListBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks
func (mr *MockBookstoreClientMockRecorder) ListBooks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookstoreClient)(nil).ListBooks), varargs...)
}

// ListShelves mocks base method
func (m *MockBookstoreClient) ListShelves(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*api.ListShelvesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListShelves", varargs...)
	ret0, _ := ret[0].(*api.ListShelvesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShelves indicates an expected call of ListShelves
func (mr *MockBookstoreClientMockRecorder) ListShelves(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShelves", reflect.TypeOf((*MockBookstoreClient)(nil).ListShelves), varargs...)
}
